{
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Welcome to the ORY Kratos HTTP API documentation!",
    "title": "Ory Kratos",
    "version": "latest"
  },
  "basePath": "/",
  "paths": {
    "/health/alive": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running.\nThis status does currently not include checks whether the database connection is working.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check alive status",
        "operationId": "isInstanceAlive",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/healthStatus"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g.\nthe database) are responsive as well.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check readiness status",
        "operationId": "isInstanceReady",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/healthStatus"
            }
          },
          "503": {
            "description": "healthNotReadyStatus",
            "schema": {
              "$ref": "#/definitions/healthNotReadyStatus"
            }
          }
        }
      }
    },
    "/identities": {
      "get": {
        "description": "This endpoint returns a login request's context with, for example, error details and\nother information.\n\nLearn how identities work in [ORY Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "List all identities in the system",
        "operationId": "listIdentities",
        "responses": {
          "200": {
            "description": "A list of identities.\n\nnolint:deadcode,unused",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identity"
              }
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      },
      "post": {
        "description": "This endpoint creates an identity. It is NOT possible to set an identity's credentials (password, ...)\nusing this method! A way to achieve that will be introduced in the future.\n\nLearn how identities work in [ORY Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Create an identity",
        "operationId": "createIdentity",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Identity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A single identity.\n\nnolint:deadcode,unused",
            "schema": {
              "$ref": "#/definitions/Identity"
            }
          },
          "400": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/identities/{id}": {
      "get": {
        "description": "Learn how identities work in [ORY Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get an identity",
        "operationId": "getIdentity",
        "parameters": [
          {
            "type": "string",
            "description": "ID must be set to the ID of identity you want to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A single identity.\n\nnolint:deadcode,unused",
            "schema": {
              "$ref": "#/definitions/Identity"
            }
          },
          "400": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      },
      "put": {
        "description": "This endpoint updates an identity. It is NOT possible to set an identity's credentials (password, ...)\nusing this method! A way to achieve that will be introduced in the future.\n\nThe full identity payload (except credentials) is expected. This endpoint does not support patching.\n\nLearn how identities work in [ORY Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Update an identity",
        "operationId": "updateIdentity",
        "parameters": [
          {
            "type": "string",
            "description": "ID must be set to the ID of identity you want to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Identity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single identity.\n\nnolint:deadcode,unused",
            "schema": {
              "$ref": "#/definitions/Identity"
            }
          },
          "400": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "404": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      },
      "delete": {
        "description": "This endpoint deletes an identity. This can not be undone.\n\nLearn how identities work in [ORY Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete an identity",
        "operationId": "deleteIdentity",
        "parameters": [
          {
            "type": "string",
            "description": "ID is the identity's ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201."
          },
          "404": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/self-service/browser/flows/login": {
      "get": {
        "description": "This endpoint initializes a browser-based user login flow. Once initialized, the browser will be redirected to\n`urls.login_ui` with the request ID set as a query parameter. If a valid user session exists already, the browser will be\nredirected to `urls.default_redirect_url`.\n\n\u003e This endpoint is NOT INTENDED for API clients and only works\nwith browsers (Chrome, Firefox, ...).\n\nMore information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "Initialize browser-based login user flow",
        "operationId": "initializeSelfServiceBrowserLoginFlow",
        "responses": {
          "302": {
            "description": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201."
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/self-service/browser/flows/logout": {
      "get": {
        "description": "This endpoint initializes a logout flow.\n\n\u003e This endpoint is NOT INTENDED for API clients and only works\nwith browsers (Chrome, Firefox, ...).\n\nOn successful logout, the browser will be redirected (HTTP 302 Found) to `urls.default_return_to`.\n\nMore information can be found at [ORY Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "Initialize Browser-Based Logout User Flow",
        "operationId": "initializeSelfServiceBrowserLogoutFlow",
        "responses": {
          "302": {
            "description": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201."
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/self-service/browser/flows/profile": {
      "get": {
        "description": "This endpoint initializes a browser-based profile management flow. Once initialized, the browser will be redirected to\n`urls.profile_ui` with the request ID set as a query parameter. If no valid user session exists, a login\nflow will be initialized.\n\n\u003e This endpoint is NOT INTENDED for API clients and only works\nwith browsers (Chrome, Firefox, ...).\n\nMore information can be found at [ORY Kratos Profile Management Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-profile-management).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "Initialize browser-based profile management flow",
        "operationId": "initializeSelfServiceProfileManagementFlow",
        "responses": {
          "302": {
            "description": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201."
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/self-service/browser/flows/profile/update": {
      "post": {
        "description": "This endpoint completes a browser-based profile management flow. This is usually achieved by POSTing data to this\nendpoint.\n\nIf the provided profile data is valid against the Identity's Traits JSON Schema, the data will be updated and\nthe browser redirected to `url.profile_ui` for further steps.\n\n\u003e This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...) and HTML Forms.\n\nMore information can be found at [ORY Kratos Profile Management Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-profile-management).",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "Complete the browser-based profile management flows",
        "operationId": "completeSelfServiceBrowserProfileManagementFlow",
        "parameters": [
          {
            "type": "string",
            "format": "uuid4",
            "description": "Request is the request ID.\n\ntype: string",
            "name": "request",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/completeSelfServiceBrowserProfileManagementFlowPayload"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201."
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/self-service/browser/flows/registration": {
      "get": {
        "description": "This endpoint initializes a browser-based user registration flow. Once initialized, the browser will be redirected to\n`urls.registration_ui` with the request ID set as a query parameter. If a valid user session exists already, the browser will be\nredirected to `urls.default_redirect_url`.\n\n\u003e This endpoint is NOT INTENDED for API clients and only works\nwith browsers (Chrome, Firefox, ...).\n\nMore information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "Initialize browser-based registration user flow",
        "operationId": "initializeSelfServiceBrowserRegistrationFlow",
        "responses": {
          "302": {
            "description": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201."
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/self-service/browser/flows/requests/login": {
      "get": {
        "description": "This endpoint returns a login request's context with, for example, error details and\nother information.\n\nWhen accessing this endpoint through ORY Kratos' Public API, ensure that cookies are set as they are required for CSRF to work. To prevent\ntoken scanning attacks, the public endpoint does not return 404 status codes to prevent scanning attacks.\n\nMore information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "common",
          "public",
          "admin"
        ],
        "summary": "Get the request context of browser-based login user flows",
        "operationId": "getSelfServiceBrowserLoginRequest",
        "parameters": [
          {
            "type": "string",
            "description": "Request is the Login Request ID\n\nThe value for this parameter comes from `request` URL Query parameter sent to your\napplication (e.g. `/login?request=abcde`).",
            "name": "request",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "loginRequest",
            "schema": {
              "$ref": "#/definitions/loginRequest"
            }
          },
          "403": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "404": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/self-service/browser/flows/requests/profile": {
      "get": {
        "description": "When accessing this endpoint through ORY Kratos' Public API, ensure that cookies are set as they are required\nfor checking the auth session. To prevent scanning attacks, the public endpoint does not return 404 status codes\nbut instead 403 or 500.\n\nMore information can be found at [ORY Kratos Profile Management Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-profile-management).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "common",
          "public",
          "admin"
        ],
        "summary": "Get the request context of browser-based profile management flows",
        "operationId": "getSelfServiceBrowserProfileManagementRequest",
        "parameters": [
          {
            "type": "string",
            "description": "Request is the Login Request ID\n\nThe value for this parameter comes from `request` URL Query parameter sent to your\napplication (e.g. `/login?request=abcde`).",
            "name": "request",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "profileManagementRequest",
            "schema": {
              "$ref": "#/definitions/profileManagementRequest"
            }
          },
          "403": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "404": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/self-service/browser/flows/requests/registration": {
      "get": {
        "description": "This endpoint returns a registration request's context with, for example, error details and\nother information.\n\nWhen accessing this endpoint through ORY Kratos' Public API, ensure that cookies are set as they are required for CSRF to work. To prevent\ntoken scanning attacks, the public endpoint does not return 404 status codes to prevent scanning attacks.\n\nMore information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "common",
          "public",
          "admin"
        ],
        "summary": "Get the request context of browser-based registration user flows",
        "operationId": "getSelfServiceBrowserRegistrationRequest",
        "parameters": [
          {
            "type": "string",
            "description": "Request is the Registration Request ID\n\nThe value for this parameter comes from `request` URL Query parameter sent to your\napplication (e.g. `/registration?request=abcde`).",
            "name": "request",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "registrationRequest",
            "schema": {
              "$ref": "#/definitions/registrationRequest"
            }
          },
          "403": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "404": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/sessions/whoami": {
      "get": {
        "description": "Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated.\nReturns a session object or 401 if the credentials are invalid or no credentials were sent.\n\nThis endpoint is useful for reverse proxies and API Gateways.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "Check who the current HTTP session belongs to",
        "operationId": "whoami",
        "responses": {
          "200": {
            "description": "session",
            "schema": {
              "$ref": "#/definitions/session"
            }
          },
          "403": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "This endpoint returns the service version typically notated using semantic versioning.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "version"
        ],
        "summary": "Get service version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "version",
            "schema": {
              "$ref": "#/definitions/version"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CredentialsType": {
      "description": "and so on.",
      "type": "string",
      "title": "CredentialsType  represents several different credential types, like password credentials, passwordless credentials,"
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Code    FormErrorCode `json:\"id,omitempty\"`",
          "type": "string"
        }
      }
    },
    "Identity": {
      "type": "object",
      "required": [
        "id",
        "traits"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "traits": {
          "$ref": "#/definitions/Traits"
        },
        "traits_schema_id": {
          "description": "TraitsSchemaID is the ID of the JSON Schema to be used for validating the identity's traits.",
          "type": "string"
        },
        "traits_schema_url": {
          "description": "TraitsSchemaURL is the URL of the endpoint where the identity's traits schema can be fetched from.\n\nformat: url",
          "type": "string"
        }
      }
    },
    "Traits": {
      "type": "object"
    },
    "UUID": {
      "type": "string",
      "format": "uuid4"
    },
    "completeSelfServiceBrowserProfileManagementFlowPayload": {
      "type": "object",
      "required": [
        "traits"
      ],
      "properties": {
        "traits": {
          "description": "Traits contains all of the identity's traits.\n\ntype: string\nformat: binary",
          "type": "object"
        }
      }
    },
    "form": {
      "description": "HTMLForm represents a HTML Form. The container can work with both HTTP Form and JSON requests",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action should be used as the form action URL (\u003cform action=\"{{ .Action }}\" method=\"post\"\u003e).",
          "type": "string"
        },
        "errors": {
          "description": "Errors contains all form errors. These will be duplicates of the individual field errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "fields": {
          "$ref": "#/definitions/formFields"
        },
        "method": {
          "description": "Method is the form method (e.g. POST)",
          "type": "string"
        }
      }
    },
    "formField": {
      "description": "Field represents a HTML Form Field",
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors contains all validation errors this particular field has caused.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "name": {
          "description": "Name is the equivalent of \u003cinput name=\"{{.Name}}\"\u003e",
          "type": "string"
        },
        "required": {
          "description": "Required is the equivalent of \u003cinput required=\"{{.Required}}\"\u003e",
          "type": "boolean"
        },
        "type": {
          "description": "Type is the equivalent of \u003cinput type=\"{{.Type}}\"\u003e",
          "type": "string"
        },
        "value": {
          "description": "Value is the equivalent of \u003cinput value=\"{{.Value}}\"\u003e",
          "type": "object"
        }
      }
    },
    "formFields": {
      "description": "Fields contains multiple fields",
      "type": "array",
      "items": {
        "$ref": "#/definitions/formField"
      }
    },
    "genericError": {
      "description": "Error responses are sent when an error (e.g. unauthorized, bad request, ...) occurred.",
      "type": "object",
      "title": "Error response",
      "properties": {
        "error": {
          "$ref": "#/definitions/genericErrorPayload"
        }
      }
    },
    "genericErrorPayload": {
      "description": "nolint:deadcode,unused",
      "type": "object",
      "properties": {
        "code": {
          "description": "Code represents the error status code (404, 403, 401, ...).",
          "type": "integer",
          "format": "int64",
          "example": 404
        },
        "debug": {
          "description": "Debug contains debug information. This is usually not available and has to be enabled.",
          "type": "string",
          "example": "The database adapter was unable to find the element"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "request": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "healthNotReadyStatus": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors contains a list of errors that caused the not ready status.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "healthStatus": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Status always contains \"ok\".",
          "type": "string"
        }
      }
    },
    "loginRequest": {
      "type": "object",
      "properties": {
        "active": {
          "$ref": "#/definitions/CredentialsType"
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the request expires. If the user still wishes to log in,\na new request has to be initiated.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the request occurred.",
          "type": "string",
          "format": "date-time"
        },
        "methods": {
          "description": "Methods contains context for all enabled login methods. If a login request has been\nprocessed, but for example the password is incorrect, this will contain error messages.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/loginRequestMethod"
          }
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from ORY Kratos. It can be used\nto forward information contained in the URL's path or query for example.",
          "type": "string"
        }
      }
    },
    "loginRequestMethod": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/loginRequestMethodConfig"
        },
        "method": {
          "$ref": "#/definitions/CredentialsType"
        }
      }
    },
    "loginRequestMethodConfig": {
      "type": "object",
      "allOf": [
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        }
      ]
    },
    "profileManagementRequest": {
      "description": "This request is used when an identity wants to update profile information\n(especially traits) in a selfservice manner.\n\nFor more information head over to: https://www.ory.sh/docs/kratos/selfservice/profile",
      "type": "object",
      "title": "Request presents a profile management request",
      "properties": {
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the profile,\na new request has to be initiated.",
          "type": "string",
          "format": "date-time"
        },
        "form": {
          "$ref": "#/definitions/form"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "identity": {
          "$ref": "#/definitions/Identity"
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the request occurred.",
          "type": "string",
          "format": "date-time"
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from ORY Kratos. It can be used\nto forward information contained in the URL's path or query for example.",
          "type": "string"
        },
        "update_successful": {
          "description": "UpdateSuccessful, if true, indicates that the profile has been updated successfully with the provided data.\nDone will stay true when repeatedly checking. If set to true, done will revert back to false only\nwhen a request with invalid (e.g. \"please use a valid phone number\") data was sent.",
          "type": "boolean"
        }
      }
    },
    "registrationRequest": {
      "type": "object",
      "properties": {
        "active": {
          "$ref": "#/definitions/CredentialsType"
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the request expires. If the user still wishes to log in,\na new request has to be initiated.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the request occurred.",
          "type": "string",
          "format": "date-time"
        },
        "methods": {
          "description": "Methods contains context for all enabled registration methods. If a registration request has been\nprocessed, but for example the password is incorrect, this will contain error messages.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/registrationRequestMethod"
          }
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from ORY Kratos. It can be used\nto forward information contained in the URL's path or query for example.",
          "type": "string"
        }
      }
    },
    "registrationRequestMethod": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/registrationRequestMethodConfig"
        },
        "method": {
          "$ref": "#/definitions/CredentialsType"
        }
      }
    },
    "registrationRequestMethodConfig": {
      "type": "object",
      "allOf": [
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        }
      ]
    },
    "session": {
      "type": "object",
      "properties": {
        "authenticated_at": {
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        },
        "identity": {
          "$ref": "#/definitions/Identity"
        },
        "issued_at": {
          "type": "string",
          "format": "date-time"
        },
        "sid": {
          "$ref": "#/definitions/UUID"
        }
      }
    },
    "version": {
      "type": "object",
      "properties": {
        "version": {
          "description": "Version is the service's version.",
          "type": "string"
        }
      }
    }
  },
  "x-forwarded-proto": "string",
  "x-request-id": "string"
}